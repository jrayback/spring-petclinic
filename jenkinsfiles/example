#!/bin/env groovy

pipeline {
  agent none

  environment {
    IMAGE = "liatrio/petclinic-tomcat"
    SMOKETEST_PASS = 'true'
    MONITOR_PASS = 'true'
    SHORT_PAUSE = 3
    MED_PAUSE = 8
    LONG_PAUSE = 21
    JOB_DESCRIPTION = "${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})"
  }

  stages {
    stage ('Start') {
      steps{
        // send build started notification
        // NOTE: There could be a notification script, in scm and put
        // a Jenkins shared library so that notification configuration information
        // is abstracted from the Jenkinsfile. Since it's only Slack for now
        // and only a demo, this is sufficient
        slackSend (color: '#FFFF00', message: "STARTED:\n'${env.JOB_DESCRIPTION}'\n\`${env.BRANCH_NAME} ${env.GIT_COMMIT}\`")
      }
    }
    // See if it's even worth building this 
    stage('Pre-Build') {
      parallel {
        stage('Run Unit Tests') {
          agent any
          steps {
            sh "sleep '${env.MED_PAUSE}'"
            echo "Unit tests PASS"
          }
        }
        stage('Check Style') {
          agent any
          steps {
            // Run some sort of linter. E.g. Checkstyle
            echo "Running Checkstyle..."
            sh "sleep '${env.SHORT_PAUSE}'"
            echo "Checkstyle PASS"
          }
        }
        stage('Code Analysis') {
          agent any
          steps {
            // Do additional static code analysis. E.g. FindBugs
            echo "Running FindBugs..."
            sh "sleep '${env.MED_PAUSE}'"
            echo "FindBugs PASS"
          }
        }
      }
    }
    stage('Build') {
      agent any
      steps {
        sh 'mvn clean install'
        // echo "install"
      }
    }
    stage('Package') {
      agent any
      steps {
        script {
          if ( env.BRANCH_NAME == 'master' ) {
              pom = readMavenPom file: 'pom.xml'
              TAG = pom.version
          } else {
              TAG = env.BRANCH_NAME
          }
          sh "docker build -t ${env.IMAGE}:${TAG} ."
          // echo "package"
        }
      }
    }
    // Deploy to ephemeral dev environment - in this case locally running
    // docker container
    stage('Deploy to Dev') {
      agent any
      steps {
        sh 'docker rm -f petclinic-tomcat-temp || true'
        sh "docker run -d -p 9966:8080 --name petclinic-tomcat-temp ${env.IMAGE}:${TAG}"
        // send a message to the channel that a dev environment is available
        slackSend (color: '#00FF00', message: "DEV environment for Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) available at http://localhost:9966/petclinic/")
      }
    }
    // Deploy to Test environment. In this case it's the local docker container made
    // publically available via vagrant share.
    // The test environment could be ephemeral or permanent
    // but doesn't need to fully simulate prod environment...
    // Just enough horsepower to run automated tests.
    stage('Deploy to Test') {
      agent any
      steps {
        // Doing this above in deploy to dev...don't need to do it twice
        // sh 'docker rm -f petclinic-tomcat-temp || true'
        // sh "docker run -d -p 9966:8080 --name petclinic-tomcat-temp ${env.IMAGE}:${TAG}"
        echo "Deploying to test environment..."
        sh "sleep '${env.SHORT_PAUSE}'"
        echo "Deployed to test environment"
        // send a message to the channel that we've deployed to test
        slackSend (color: '#00FF00', message: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) deployed to TEST: http://jmr.liatrio.petclinic.ngrok.io/petclinic/")
      }
    }
    // Run automated tests
    stage('Validate') {
      parallel {
        stage('Smoke Tests') {
          agent any
          steps {
            // Run automated smoke tests
            // Basic functionality, fail fast
            echo "Running smoke tests..."
            sh "sleep '${env.MED_PAUSE}'"
            // This script simply let's me simulate a smoke test failure if desired, set env
            // variable to 'false' and the pipeline will fail here.
            script {
              if( env.SMOKETEST_PASS == 'false' ) {
                echo "Smoke tests FAIL"
                currentBuild.result = 'FAILURE'
                error('Smoke tests FAIL')
              }
            }
            echo "Smoke tests PASS"
          }
        }
        stage('Acceptance Tests') {
          agent any
          steps {
            // Run automated acceptance tests
            // More comprehensive, look for regressions
            echo "Running acceptance tests..."
            sh "sleep '${env.MED_PAUSE}'"
            echo "Acceptance tests PASS"
          }
        }
      }
    }
    // Princess (E.g.) is Etsy's name for an environment that fully simulates prod
    // but is only internally accessible. Deploy here before prod.
    // This allows for any type of manual inspection required before going
    // to blue/green
    stage("Deploy to 'Princess'") {
      agent any
      steps {
        echo "Deploying to 'Princess'..."
        sh "sleep '${env.SHORT_PAUSE}'"
        echo "Deployed to 'Princess'"
        // send a message to the channel that we've deployed to 'Princess'
        slackSend (color: '#00FF00', message: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) deployed to PRINCESS.\n*Awaiting permission to push to PROD...*")
      }
    }
    // Checks done before going to prod. In some cases, these might be manual.
    // Obviously we want to automate as much as possible.
    stage('Pre-Prod') {
      parallel {
        stage('UAT') {
          agent any
          steps {
            // Run User Acceptance Tests (automated or manual), E.g. Cucumber
            echo "Running Cucumber tests..."
            sh "sleep '${env.SHORT_PAUSE}'"
            echo "Cucumber tests PASS"
          }
        }
        stage('Security Sanity Check') {
          agent any
          steps {
            // Run basic security/pen tests, assumes internal princess environment
            // can be made to very closely emulate prod (firewalls, etc.)
            // Use maybe something proprietary like Nessus...
            echo "Running Nessus check..."
            sh "sleep '${env.MED_PAUSE}'"
            echo "Nessus check PASS"
          }
        }
        stage('Basic load test') {
          agent any
          steps {
            // Run basic load test, E.g. JMeter or Gattling
            echo "Running JMeter tests..."
            sh "sleep '${env.MED_PAUSE}'"
            echo "JMeter test PASS"
          }
        }
      }
    }
    // When everything looks good in Princess, deploy to dark prod
    stage('Deploy to Dark Prod') {
      // For now I have a manual step to deploy to prod. This assumes that some amount
      // of examinationn will occur in 'Princess' before electing to promote.
      // Could easily be all automated.
      input {
        message "Deploy to prod?"
        ok "Yes"
      }
      agent any
      steps {
        echo 'Deploying to dark prod...'
        sh "sleep '${env.SHORT_PAUSE}'"
        echo 'Deployed to dark prod.'
        // send a message to the channel that we've deployed to dark prod
        slackSend (color: '#00FF00', message: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) deployed to DARK PROD")
      }
    }
    stage('Cutover') {
      parallel {
        // Make dark prod light
        stage('Redirect Load Balancer to New Light Prod') {
          agent any
          steps {
            echo "Redirecting load balancer..."
            sh "sleep '${env.SHORT_PAUSE}'"
            // send a message to the channel that we've redirected prod
            slackSend (color: '#00FF00', message: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) DARK PROD is new LIGHT PROD")
            echo "Load balancer now pointing new light prod."
          }
        }
        // Monitor http traffic in new light prod environment for a 
        // set period of time, if things start going awry, revert to previous
        // light prod and fail, otherwise succeed.
        stage('Monitor New Light Prod') {
          agent any
          steps {
            echo 'Monitoring http traffic in new prod environment...'
            sh "sleep '${env.LONG_PAUSE}'"
            // This script simply let's me simulate a failure in prod if desired, set env
            // variable to 'false' and the pipeline will fail here.
            script {
              if( env.MONITOR_PASS == 'false' ) {
                echo "Something's gone horribly wrong in production!"
                slackSend (color: '#FF0000', message: "Something's gone horribly wrong in production! Here's the report: https://grafana.com/")
                // Point load balancer back to former light prod
                // SEE SIMILAR CODE IN STAGE ABOVE...this is another option for a shared script of some sort in
                // a Jenkins shared library
                echo "Redirecting load balancer..."
                sh "sleep '${env.SHORT_PAUSE}'"
                // send a message to the channel that we've reverted prod
                slackSend (color: '#FF0000', message: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) LIGHT PROD REVERTED!")
                currentBuild.result = 'FAILURE'
                error('Prod monitoring FAIL')
              }
            }
            echo 'Traffic looks good!'
          }
        }
      }
    }
  }
  // After the pipeline has completed, publish ABORT, FAIL or SUCCESS results to Slack
  post { 
    aborted {
      slackSend (color: '#FF0000', message: "ABORTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
    failure {
      slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
    success {
      slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
  }
}
